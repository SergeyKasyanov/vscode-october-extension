/* eslint-disable @typescript-eslint/naming-convention */

type Rule = { snippet: string };

const rules: { [name: string]: Rule } = {
    accepted: { snippet: 'accepted', },
    accepted_if: { snippet: 'accepted_if:${1:anotherfield},${2:value}', },
    active_url: { snippet: 'active_url', },
    after: { snippet: 'after:${1:date}', },
    after_or_equal: { snippet: 'after_or_equal:${1:date}', },
    alpha: { snippet: 'alpha', },
    alpha_dash: { snippet: 'alpha_dash', },
    alpha_num: { snippet: 'alpha_num', },
    array: { snippet: 'array:${1:key1},${2:key2}', },
    bail: { snippet: 'bail', },
    before: { snippet: 'before:${1:date}', },
    before_or_equal: { snippet: 'before_or_equal:${1:date}', },
    between: { snippet: 'between:${1:min},${2:max}', },
    boolean: { snippet: 'boolean', },
    confirmed: { snippet: 'confirmed', },
    current_password: { snippet: 'current_password:${1:guard}', },
    date: { snippet: 'date', },
    date_equals: { snippet: 'date_equals:${1:date}', },
    date_format: { snippet: 'date_format:${1:format}', },
    declined: { snippet: 'declined', },
    declined_if: { snippet: 'declined_if:${1:anotherfield},${2:value}', },
    different: { snippet: 'different:${1:field}', },
    digits: { snippet: 'digits:${1:value}', },
    digits_between: { snippet: 'digits_between:${1:min},${2:max}', },
    dimensions: { snippet: 'dimensions:min_width=${1:min_width},max_width=${2:max_width},min_height=${3:min_height},max_height=${4:max_height},width=${5:width},height=${6:height},ratio=${7:ratio}', },
    distinct: { snippet: 'distinct:${1:arg}' },
    email: { snippet: 'email' },
    ends_with: { snippet: 'ends_with:${1:foo},${2:bar}' },
    exclude: { snippet: 'exclude' },
    exclude_if: { snippet: 'exclude_if:${1:anotherfield},${2:value}' },
    exclude_unless: { snippet: 'exclude_unless:${1:anotherfield},${2:value}' },
    exclude_with: { snippet: 'exclude_with:${1:anotherfield}' },
    exclude_without: { snippet: 'exclude_without:${1:anotherfield}' },
    exists: { snippet: 'exists:${1:table},${2:column}' },
    file: { snippet: 'file' },
    filled: { snippet: 'filled' },
    gt: { snippet: 'gt:${1:field}' },
    gte: { snippet: 'gte:${1:field}' },
    image: { snippet: 'image' },
    in: { snippet: 'in:${1:foo},${2:bar}' },
    in_array: { snippet: 'in_array:${1:anotherfield}.*' },
    integer: { snippet: 'integer' },
    ip: { snippet: 'ip' },
    ipv4: { snippet: 'ipv4' },
    ipv6: { snippet: 'ipv6' },
    json: { snippet: 'json' },
    lt: { snippet: 'lt:${1:field}' },
    lte: { snippet: 'lte:${1:field}' },
    mac_address: { snippet: 'mac_address' },
    max: { snippet: 'max:${1:value}' },
    mimetypes: { snippet: 'mimetypes:${1:type}' },
    mimes: { snippet: 'mimes:${1:foo},${2:bar}' },
    min: { snippet: 'min:${1:value}' },
    multiple_of: { snippet: 'multiple_of:${1:value}' },
    not_in: { snippet: 'not_in:${1:foo},${2:bar}' },
    not_regex: { snippet: 'not_regex:pattern' },
    nullable: { snippet: 'nullable' },
    numeric: { snippet: 'numeric' },
    password: { snippet: 'password' },
    present: { snippet: 'present' },
    prohibited: { snippet: 'prohibited' },
    prohibited_if: { snippet: 'prohibited_if:${1:anotherfield},${2:value}' },
    prohibited_unless: { snippet: 'prohibited_unless:${1:anotherfield},${2:value}' },
    prohibits: { snippet: 'prohibits:${1:anotherfield}' },
    regex: { snippet: 'regex:pattern' },
    required: { snippet: 'required' },
    required_if: { snippet: 'required_if:${1:anotherfield},${2:value}' },
    required_unless: { snippet: 'required_unless:${1:anotherfield},${2:value}' },
    required_with: { snippet: 'required_with:${1:foo},${2:bar}' },
    required_with_all: { snippet: 'required_with_all:${1:foo},${2:bar}' },
    required_without: { snippet: 'required_without:${1:foo},${2:bar}' },
    required_without_all: { snippet: 'required_without_all:${1:foo},${2:bar}' },
    required_array_keys: { snippet: 'required_array_keys:${1:foo},${2:bar}' },
    same: { snippet: 'same:${1:field}' },
    size: { snippet: 'size:${1:value}' },
    starts_with: { snippet: 'starts_with:${1:foo},${2:bar}' },
    string: { snippet: 'string' },
    timezone: { snippet: 'timezone' },
    unique: { snippet: 'unique:${1:table},${2:column}' },
    url: { snippet: 'url' },
    uuid: { snippet: 'uuid' },
};

export default rules;
